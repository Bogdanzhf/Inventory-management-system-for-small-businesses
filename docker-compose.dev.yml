version: "3.8"

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    restart: always
    depends_on:
      - postgres
      - redis
    env_file:
      - .env.dev
    ports:
      - "${BACKEND_PORT}:5000"
    volumes:
      - ./backend:/app
    networks:
      - app-network

  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    restart: always
    depends_on:
      - redis
      - postgres
    env_file:
      - .env.dev
    command: celery -A app.core.celery worker --loglevel=info
    volumes:
      - ./backend:/app
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    restart: always
    env_file:
      - .env.dev
    ports:
      - "${FRONTEND_PORT}:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - app-network

  postgres:
    image: postgres:14-alpine
    restart: always
    env_file:
      - .env.dev
    volumes:
      - postgres-data-dev:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT_LOCAL}:5432"
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - "${REDIS_PORT_LOCAL}:6379"
    volumes:
      - redis-data-dev:/data
    networks:
      - app-network

  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - "${NGINX_PORT}:80"
    volumes:
      - ./nginx/nginx.dev.conf:/etc/nginx/nginx.conf
    depends_on:
      - backend
      - frontend
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data-dev:
  redis-data-dev:
